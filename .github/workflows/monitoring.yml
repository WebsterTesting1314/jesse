name: Monitoring & Health Checks

on:
  schedule:
    # 每小時運行健康檢查
    - cron: '0 * * * *'
    # 每天運行完整監控
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of check to run'
        required: true
        type: choice
        options:
          - health
          - performance
          - security
          - full

permissions:
  contents: read
  issues: write
  pull-requests: read

jobs:
  # 健康檢查
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || inputs.check_type == 'health' || inputs.check_type == 'full'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests psutil
      
      - name: Check core dependencies
        run: |
          echo "🔍 Checking core dependencies..."
          python -c "
          import pkg_resources
          import requests
          
          # 檢查 PyPI 上的最新版本
          def check_package_updates():
              with open('core/requirements.txt', 'r') as f:
                  packages = [line.strip() for line in f if line.strip() and not line.startswith('#')]
              
              outdated = []
              for package in packages[:5]:  # 檢查前5個主要包
                  if '==' in package:
                      name, version = package.split('==')
                      try:
                          resp = requests.get(f'https://pypi.org/pypi/{name}/json', timeout=5)
                          if resp.status_code == 200:
                              latest = resp.json()['info']['version']
                              if version != latest:
                                  outdated.append(f'{name}: {version} -> {latest}')
                      except:
                          pass
              
              return outdated
          
          outdated = check_package_updates()
          if outdated:
              print('📦 Package updates available:')
              for pkg in outdated:
                  print(f'  - {pkg}')
          else:
              print('✅ All checked packages are up to date')
          "
      
      - name: Check system resources
        run: |
          echo "💾 System Resources:"
          echo "Memory: $(free -h | awk 'NR==2{printf \"%.1f%% used\", $3*100/$2 }')"
          echo "Disk: $(df -h / | awk 'NR==2{print $5 \" used\"}')"
          echo "Load: $(uptime | awk -F'load average:' '{print $2}')"
      
      - name: Check external dependencies
        run: |
          echo "🌐 External Dependencies Check:"
          
          # 檢查 PyPI 連接
          if curl -s --max-time 10 https://pypi.org > /dev/null; then
            echo "✅ PyPI accessible"
          else
            echo "❌ PyPI connection failed"
          fi
          
          # 檢查 Ethereum RPC
          if curl -s --max-time 10 -X POST https://eth-mainnet.alchemyapi.io/v2/demo \
               -H "Content-Type: application/json" \
               -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' > /dev/null; then
            echo "✅ Ethereum RPC accessible"
          else
            echo "❌ Ethereum RPC connection failed"
          fi

  # 性能監控
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || inputs.check_type == 'performance' || inputs.check_type == 'full'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: jesse_user
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: jesse_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest-benchmark memory-profiler psutil
          pip install -r core/requirements.txt
          cd core && pip install -e .
      
      - name: Run performance benchmarks
        run: |
          cd core
          echo "⚡ Running performance benchmarks..."
          
          # 創建簡單的性能測試
          cat > benchmark_test.py << 'EOF'
          import pytest
          import jesse.indicators as ta
          import numpy as np
          
          @pytest.mark.benchmark(group="indicators")
          def test_sma_performance(benchmark):
              data = np.random.random(10000)
              result = benchmark(ta.sma, data, 20)
              assert len(result) == len(data)
          
          @pytest.mark.benchmark(group="indicators")  
          def test_ema_performance(benchmark):
              data = np.random.random(10000)
              result = benchmark(ta.ema, data, 20)
              assert len(result) == len(data)
          EOF
          
          pytest benchmark_test.py --benchmark-json=benchmark.json --benchmark-disable-gc
          
          # 分析結果
          python -c "
          import json
          with open('benchmark.json', 'r') as f:
              data = json.load(f)
          
          print('📊 Performance Results:')
          for bench in data['benchmarks']:
              name = bench['name']
              mean = bench['stats']['mean']
              stddev = bench['stats']['stddev']
              print(f'  {name}: {mean:.6f}s ± {stddev:.6f}s')
          "
      
      - name: Memory usage analysis
        run: |
          echo "💾 Memory Usage Analysis:"
          python -c "
          import psutil
          import os
          
          process = psutil.Process(os.getpid())
          memory_info = process.memory_info()
          
          print(f'RSS: {memory_info.rss / 1024 / 1024:.1f} MB')
          print(f'VMS: {memory_info.vms / 1024 / 1024:.1f} MB')
          
          # 檢查系統內存
          system_memory = psutil.virtual_memory()
          print(f'System Memory Usage: {system_memory.percent:.1f}%')
          "
      
      - name: Database performance check
        run: |
          echo "🗄️ Database Performance:"
          python -c "
          import time
          import psycopg2
          
          # 連接測試
          start = time.time()
          conn = psycopg2.connect(
              host='localhost',
              port=5432,
              database='jesse_db',
              user='jesse_user',
              password='password123'
          )
          connect_time = time.time() - start
          
          # 查詢測試
          cur = conn.cursor()
          start = time.time()
          cur.execute('SELECT 1')
          query_time = time.time() - start
          
          print(f'Connection time: {connect_time:.3f}s')
          print(f'Query time: {query_time:.3f}s')
          
          conn.close()
          "

  # 安全監控
  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || inputs.check_type == 'security' || inputs.check_type == 'full'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install security tools
        run: |
          pip install safety bandit semgrep
      
      - name: Run security scans
        run: |
          echo "🔒 Security Monitoring:"
          
          # 依賴漏洞檢查
          echo "Checking dependency vulnerabilities..."
          safety check --json --output safety-report.json || true
          
          # 代碼安全檢查
          echo "Running code security analysis..."
          bandit -r core/jesse/ jesse-defi-mev/ -f json -o bandit-report.json || true
          
          # 分析結果
          python -c "
          import json
          import os
          
          # Safety 報告
          if os.path.exists('safety-report.json'):
              with open('safety-report.json', 'r') as f:
                  safety_data = json.load(f)
              
              vulns = safety_data.get('vulnerabilities', [])
              if vulns:
                  print(f'⚠️  Found {len(vulns)} dependency vulnerabilities')
                  for vuln in vulns[:3]:  # 顯示前3個
                      print(f'  - {vuln.get(\"package_name\", \"unknown\")}')
              else:
                  print('✅ No dependency vulnerabilities found')
          
          # Bandit 報告
          if os.path.exists('bandit-report.json'):
              with open('bandit-report.json', 'r') as f:
                  bandit_data = json.load(f)
              
              issues = bandit_data.get('results', [])
              high_issues = [i for i in issues if i.get('issue_severity') == 'HIGH']
              
              if high_issues:
                  print(f'⚠️  Found {len(high_issues)} high severity security issues')
              else:
                  print('✅ No high severity security issues found')
          "
      
      - name: Check for leaked secrets
        run: |
          echo "🔍 Checking for potential secret leaks..."
          
          # 簡單的秘密檢查
          if grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]{8,}['\"]" . \
               --exclude-dir=.git \
               --exclude-dir=node_modules \
               --exclude-dir=.github \
               --exclude="*.md" \
               --exclude="*.yml" \
               --exclude="*.yaml"; then
            echo "⚠️  Potential secrets found in code"
          else
            echo "✅ No obvious secrets detected"
          fi

  # 依賴更新檢查
  dependency-update-check:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || inputs.check_type == 'full'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Check for outdated packages
        run: |
          pip install pip-check-reqs requests
          
          echo "📦 Checking for outdated Python packages..."
          
          python -c "
          import subprocess
          import requests
          import json
          
          # 獲取當前安裝的包
          result = subprocess.run(['pip', 'freeze'], capture_output=True, text=True)
          installed = {}
          
          for line in result.stdout.split('\n'):
              if '==' in line:
                  name, version = line.split('==')
                  installed[name.lower()] = version
          
          # 檢查主要包的更新
          important_packages = ['numpy', 'pandas', 'fastapi', 'pytest']
          updates_available = []
          
          for package in important_packages:
              if package in installed:
                  try:
                      resp = requests.get(f'https://pypi.org/pypi/{package}/json', timeout=10)
                      if resp.status_code == 200:
                          latest = resp.json()['info']['version']
                          current = installed[package]
                          if current != latest:
                              updates_available.append(f'{package}: {current} -> {latest}')
                  except:
                      pass
          
          if updates_available:
              print('Updates available:')
              for update in updates_available:
                  print(f'  - {update}')
          else:
              print('✅ Key packages are up to date')
          "

  # 創建監控報告
  create-monitoring-report:
    name: Create Monitoring Report
    runs-on: ubuntu-latest
    needs: [health-check, performance-monitoring, security-monitoring, dependency-update-check]
    if: always() && (github.event_name == 'schedule' || inputs.check_type == 'full')
    
    steps:
      - name: Generate monitoring report
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🔍 System Monitoring Report - ${new Date().toISOString().split('T')[0]}`;
            
            let report = `# ${title}\n\n`;
            report += `Generated on: ${new Date().toISOString()}\n\n`;
            
            // 檢查各個 job 的狀態
            const jobs = {
              'Health Check': '${{ needs.health-check.result }}',
              'Performance Monitoring': '${{ needs.performance-monitoring.result }}',  
              'Security Monitoring': '${{ needs.security-monitoring.result }}',
              'Dependency Update Check': '${{ needs.dependency-update-check.result }}'
            };
            
            report += '## 📊 Overall Status\n\n';
            
            for (const [job, status] of Object.entries(jobs)) {
              const icon = status === 'success' ? '✅' : 
                          status === 'failure' ? '❌' : 
                          status === 'skipped' ? '⏭️' : '⚠️';
              report += `- ${icon} ${job}: ${status}\n`;
            }
            
            report += '\n## 🔧 Recommended Actions\n\n';
            
            let hasIssues = false;
            if (jobs['Security Monitoring'] === 'failure') {
              report += '- 🔒 Review security scan results and address any high-priority issues\n';
              hasIssues = true;
            }
            
            if (jobs['Performance Monitoring'] === 'failure') {
              report += '- ⚡ Investigate performance regressions\n';
              hasIssues = true;
            }
            
            if (!hasIssues) {
              report += '- ✅ No immediate actions required\n';
            }
            
            report += '\n## 📈 Trends\n\n';
            report += '- Monitor system performance over time\n';
            report += '- Track dependency update frequency\n';
            report += '- Review security scan trends\n';
            
            report += '\n---\n*This report is automatically generated by GitHub Actions*';
            
            // 如果是定期運行且有問題，創建 issue
            if (hasIssues && context.eventName === 'schedule') {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Monitoring Alert - ${new Date().toISOString().split('T')[0]}`,
                body: report,
                labels: ['monitoring', 'alert']
              });
            }
            
            console.log(report);

  # 清理舊的監控數據
  cleanup:
    name: Cleanup Old Data
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Close old monitoring issues
        uses: actions/github-script@v7
        with:
          script: |
            // 關閉超過7天的監控 issue
            const sevenDaysAgo = new Date();
            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
            
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'monitoring',
              state: 'open'
            });
            
            for (const issue of issues) {
              const createdAt = new Date(issue.created_at);
              if (createdAt < sevenDaysAgo) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: '🤖 Auto-closed: Monitoring issue older than 7 days'
                });
              }
            }