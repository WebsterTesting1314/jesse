name: 🚀 Integrated Validation Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.10"
  NODE_VERSION: "18"

jobs:
  stage1-static-analysis:
    name: 📊 Stage 1 - Static Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort ruff mypy bandit safety
          pip install -r core/requirements.txt
      
      - name: 🎨 Code Quality Gate
        run: |
          echo "::group::Black Formatting Check"
          black --check --diff core/ jesse-defi-mev/ scripts/
          echo "::endgroup::"
          
          echo "::group::Import Sorting Check"
          isort --check-only --diff core/ jesse-defi-mev/
          echo "::endgroup::"
          
          echo "::group::Ruff Linting"
          ruff check core/ jesse-defi-mev/ scripts/
          echo "::endgroup::"
          
          echo "::group::MyPy Type Checking"
          mypy core/jesse/ --ignore-missing-imports
          echo "::endgroup::"
      
      - name: 🔒 Security Gate
        run: |
          echo "::group::Bandit Security Scan"
          bandit -r core/jesse/ jesse-defi-mev/ -f json -o bandit-report.json || true
          echo "::endgroup::"
          
          echo "::group::Safety Dependency Check"
          safety check --json --output safety-report.json || true
          echo "::endgroup::"
      
      - name: 📊 Upload Quality Metrics
        uses: codecov/codecov-action@v3
        with:
          flags: quality
          name: quality-analysis
          fail_ci_if_error: false

  stage2-functional-testing:
    name: 🧪 Stage 2 - Functional Testing
    needs: stage1-static-analysis
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: jessepwd123
          POSTGRES_USER: jesse_user
          POSTGRES_DB: jesse_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio pytest-mock
          pip install -r core/requirements.txt
          cd core && pip install -e .
      
      - name: 🧪 Unit Testing Gate
        run: |
          echo "::group::Core Jesse Tests"
          cd core && pytest tests/ --cov=jesse --cov-report=xml --cov-report=html -v
          echo "::endgroup::"
      
      - name: 🔗 Integration Testing Gate
        run: |
          echo "::group::Database Integration Tests"
          cd core && pytest tests/integration/ --cov-append --cov-report=xml -v
          echo "::endgroup::"
      
      - name: ⚡ HFT Performance Tests
        run: |
          echo "::group::HFT Component Tests"
          cd core && python -m pytest tests/test_hft_*.py --cov-append --cov-report=xml -v
          echo "::endgroup::"
          
          echo "::group::HFT Benchmark Tests"
          cd core && python -c "
          from jesse.services.hft_benchmark import run_benchmark_suite
          results = run_benchmark_suite()
          print('HFT Benchmark Results:', results)
          "
          echo "::endgroup::"
      
      - name: 🌐 DeFi MEV Tests
        run: |
          echo "::group::DeFi Connector Tests"
          cd jesse-defi-mev && python -m pytest tests/ --cov=. --cov-append --cov-report=xml -v
          echo "::endgroup::"
      
      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./core/coverage.xml,./jesse-defi-mev/coverage.xml
          flags: functional
          name: functional-tests
          fail_ci_if_error: false

  stage3-performance-security:
    name: ⚡ Stage 3 - Performance & Security
    needs: stage2-functional-testing
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r core/requirements.txt
          cd core && pip install -e .
          # 安裝性能測試工具
          pip install memory-profiler psutil locust
      
      - name: ⚡ Performance Gate
        run: |
          echo "::group::HFT Latency Tests"
          python scripts/test_hft_latency.py
          echo "::endgroup::"
          
          echo "::group::Memory Usage Tests"
          python scripts/test_memory_usage.py
          echo "::endgroup::"
          
          echo "::group::Throughput Tests"
          python scripts/test_throughput.py
          echo "::endgroup::"
      
      - name: 🔐 Security Gate
        run: |
          echo "::group::API Security Tests"
          python scripts/test_api_security.py
          echo "::endgroup::"
          
          echo "::group::Smart Contract Security (if exists)"
          if [ -d "contracts/src" ]; then
            echo "Running contract security tests..."
            # 添加智能合約安全測試
          fi
          echo "::endgroup::"
      
      - name: ✅ Final Validation Gate
        run: |
          python scripts/validate_all_gates.py

  codecov-analysis:
    name: 📈 Codecov Analysis
    needs: [stage1-static-analysis, stage2-functional-testing, stage3-performance-security]
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 📊 Codecov Analysis
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./core/coverage.xml,./jesse-defi-mev/coverage.xml
          flags: complete
          name: jesse-hft-coverage
          fail_ci_if_error: true
          verbose: true

  taskmaster-update:
    name: 📋 TaskMaster Status Update
    needs: codecov-analysis
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📊 Update Task Status
        run: |
          # 提取 commit message 中的任務 ID
          TASK_ID=$(echo "${{ github.event.head_commit.message }}" | grep -oE 'task-[0-9]+(\.[0-9]+)?' || echo "")
          
          if [ -n "$TASK_ID" ]; then
            echo "Found task ID: $TASK_ID"
            
            # 根據工作流程結果決定狀態
            if [ "${{ needs.codecov-analysis.result }}" = "success" ]; then
              STATUS="done"
              MESSAGE="所有驗證通過，任務完成"
            else
              STATUS="in-progress"
              MESSAGE="驗證失敗，需要修復問題"
            fi
            
            echo "Updating TaskMaster with status: $STATUS"
            # 這裡可以添加實際的 TaskMaster API 調用
            # curl -X POST "https://api.taskmaster.ai/update" \
            #   -H "Authorization: Bearer ${{ secrets.TASKMASTER_TOKEN }}" \
            #   -d "{\"task_id\": \"$TASK_ID\", \"status\": \"$STATUS\", \"message\": \"$MESSAGE\"}"
          else
            echo "No task ID found in commit message"
          fi

  deploy:
    name: 🚀 Automated Deployment
    needs: codecov-analysis
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐳 Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # docker build -t jesse-hft:latest .
          # docker push registry/jesse-hft:latest
      
      - name: 🌐 Production Deployment
        if: success()
        run: |
          echo "Deploying to production environment..."
          # kubectl apply -f k8s/production/
      
      - name: 📊 Post-Deployment Monitoring
        run: |
          echo "Starting post-deployment monitoring..."
          # python scripts/monitor_deployment.py

  summary:
    name: 📊 Pipeline Summary
    needs: [stage1-static-analysis, stage2-functional-testing, stage3-performance-security, codecov-analysis]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📊 Generate Summary
        run: |
          echo "## 🚀 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Static Analysis | ${{ needs.stage1-static-analysis.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Functional Testing | ${{ needs.stage2-functional-testing.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance & Security | ${{ needs.stage3-performance-security.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Codecov Analysis | ${{ needs.codecov-analysis.result }} | - |" >> $GITHUB_STEP_SUMMARY
          
          # 決定整體狀態
          if [ "${{ needs.codecov-analysis.result }}" = "success" ]; then
            echo "✅ **Overall Status: SUCCESS** - All validation stages passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Overall Status: FAILED** - Some validation stages failed." >> $GITHUB_STEP_SUMMARY
          fi 