name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '13'
  REDIS_VERSION: '6'

jobs:
  # 代碼質量檢查
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort bandit safety mypy pytest-cov
          pip install -r core/requirements.txt
      
      - name: Code formatting check (Black)
        run: black --check --diff core/ jesse-defi-mev/
      
      - name: Import sorting check (isort)
        run: isort --check-only --diff core/ jesse-defi-mev/
      
      - name: Linting (flake8)
        run: flake8 core/ jesse-defi-mev/ --max-line-length=100 --ignore=E203,W503
      
      - name: Type checking (mypy)
        run: mypy core/jesse/ --ignore-missing-imports --no-strict-optional
      
      - name: Security audit (bandit)
        run: bandit -r core/jesse/ jesse-defi-mev/ -f json -o bandit-report.json || true
      
      - name: Dependency security check
        run: safety check --json --output safety-report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Jesse 核心框架測試
  jesse-core-tests:
    name: Jesse Core Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: jesse_user
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: jesse_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential wget
      
      - name: Install TA-Lib
        run: |
          cd /tmp
          wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
          tar -xzf ta-lib-0.4.0-src.tar.gz
          cd ta-lib/
          ./configure --prefix=/usr
          make
          sudo make install
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r core/requirements.txt
          pip install pytest-cov pytest-xdist
          cd core && pip install -e .
      
      - name: Setup environment
        run: |
          cp .env.example .env
          echo "POSTGRES_HOST=localhost" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "POSTGRES_NAME=jesse_db" >> .env
          echo "POSTGRES_USERNAME=jesse_user" >> .env
          echo "POSTGRES_PASSWORD=password123" >> .env
          echo "REDIS_HOST=localhost" >> .env
          echo "REDIS_PORT=6379" >> .env
      
      - name: Run Jesse core tests
        run: |
          cd core
          pytest tests/ -v --cov=jesse --cov-report=xml --cov-report=html --cov-fail-under=80
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_NAME: jesse_db
          POSTGRES_USERNAME: jesse_user
          POSTGRES_PASSWORD: password123
          REDIS_HOST: localhost
          REDIS_PORT: 6379
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: core/coverage.xml
          name: jesse-core-coverage
          fail_ci_if_error: true

  # 智能合約測試
  smart-contracts-tests:
    name: Smart Contracts Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      
      - name: Install dependencies
        run: |
          cd contracts
          forge install
      
      - name: Check contract formatting
        run: |
          cd contracts
          forge fmt --check
      
      - name: Run contract tests
        run: |
          cd contracts
          forge test --via-ir -vvv --gas-report
      
      - name: Generate coverage report
        run: |
          cd contracts
          forge coverage --report lcov
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: contracts/lcov.info
          name: smart-contracts-coverage
      
      - name: Run Slither analysis
        uses: crytic/slither-action@v0.3.0
        id: slither
        with:
          target: 'contracts/src/'
          slither-config: 'contracts/slither.config.json'
          fail-on: none
      
      - name: Upload Slither report
        uses: actions/upload-artifact@v3
        with:
          name: slither-report
          path: ${{ steps.slither.outputs.stdout }}

  # DeFi MEV 擴展測試
  defi-mev-tests:
    name: DeFi MEV Extension Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: jesse-defi-mev/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd jesse-defi-mev
          poetry install --no-interaction --no-root
      
      - name: Install project
        run: |
          cd jesse-defi-mev
          poetry install --no-interaction
      
      - name: Run tests
        run: |
          cd jesse-defi-mev
          poetry run pytest tests/ -v --cov=connectors --cov=strategies --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: jesse-defi-mev/coverage.xml
          name: defi-mev-coverage

  # 集成測試
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [jesse-core-tests, smart-contracts-tests, defi-mev-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: jesse_user
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: jesse_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential wget
      
      - name: Install TA-Lib
        run: |
          cd /tmp
          wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
          tar -xzf ta-lib-0.4.0-src.tar.gz
          cd ta-lib/
          ./configure --prefix=/usr
          make
          sudo make install
      
      - name: Setup environment
        run: |
          python -m pip install --upgrade pip
          pip install -r core/requirements.txt
          cd core && pip install -e .
          cp .env.example .env
      
      - name: Start local blockchain
        run: |
          cd contracts
          anvil --fork-url https://eth-mainnet.alchemyapi.io/v2/demo --fork-block-number 18000000 &
          sleep 5
      
      - name: Deploy contracts
        run: |
          cd contracts
          forge script script/Deploy.s.sol --fork-url http://localhost:8545 --broadcast
      
      - name: Run integration tests
        run: |
          python tests/integration/test_full_system.py
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_NAME: jesse_db
          POSTGRES_USERNAME: jesse_user
          POSTGRES_PASSWORD: password123
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          RPC_URL: http://localhost:8545

  # 性能測試
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest-benchmark memory-profiler
          pip install -r core/requirements.txt
          cd core && pip install -e .
      
      - name: Run performance benchmarks
        run: |
          cd core
          pytest tests/performance/ --benchmark-json=benchmark.json
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: core/benchmark.json

  # 構建檢查
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [jesse-core-tests, smart-contracts-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Build Jesse package
        run: |
          cd core
          python setup.py sdist bdist_wheel
      
      - name: Check package
        run: |
          pip install twine
          twine check core/dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-packages
          path: core/dist/

  # 通知
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, build-check]
    if: always()
    
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ All tests passed successfully!"
          # 可以添加 Slack/Discord 通知
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Some tests failed!"
          # 可以添加 Slack/Discord 通知